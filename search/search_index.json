{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to CustomProteinSearch # Figure 1: Overview of the CusProSe package functionalities CustomProteinSearch is a python package containing two independent but complementary programs whose overall objective is to help users to search for specific proteins of interest based on their domain composition: IterHMMBuild and ProSeCDA . IterHMMBuild is an iterative search method based on the hmmer program, the aim of which is to provide users with a representative HMM protein profile of interest constructed by an iterative enrichment process starting from a small initial set of related protein sequences. ProSeCDA is a tool that allows to search in a given protein database multiple proteins of interest defined by a user-specified set of domains.","title":"Home"},{"location":"index.html#welcome-to-customproteinsearch","text":"Figure 1: Overview of the CusProSe package functionalities CustomProteinSearch is a python package containing two independent but complementary programs whose overall objective is to help users to search for specific proteins of interest based on their domain composition: IterHMMBuild and ProSeCDA . IterHMMBuild is an iterative search method based on the hmmer program, the aim of which is to provide users with a representative HMM protein profile of interest constructed by an iterative enrichment process starting from a small initial set of related protein sequences. ProSeCDA is a tool that allows to search in a given protein database multiple proteins of interest defined by a user-specified set of domains.","title":"Welcome to CustomProteinSearch"},{"location":"ihb_description.html","text":"","title":"Ihb description"},{"location":"ihb_introduction.html","text":"IterHMMBuild overall procedure # Figure 2: Pipeline overview of IterHMMBuild IterHMMBuild is an iterative search method based on the hmmer program, the aim of which is to provide users with a representative HMM protein profile of interest constructed by an iterative enrichment process starting from a small initial set of related protein sequences. The IterHMMBuild procedure starts building an HMM profile from either a set of related protein sequences or a single query sequence. This initial profile is then used to identify homologous sequences in any user-specified protein sequence database. If sequences are found, they are added to the initial query sequences and a new HMM profile model is built. This process is repeated until no new sequences are found (i.e. convergence is reached). Inputs # Two inputs are required for IterHMMBuild. The first input is either a fasta file with at least one protein sequence ( Figure 2 ) OR a directory location where multiple individual fasta files are stored ( Figure 1 ). In the first case, the output will contain an HMM profile representative of the sequences in the fasta file given as input; if a directory is given as input then the HMM profile in the output will be a concatenation of HMM profiles, each corresponding to the fasta files present in the directory. The second input is a fasta file of protein database used to enrich initial protein sequence(s) of interest. HMM building step # The HMM building is a two-step procedure: a multiple sequence alignment is performed on the input sequences using muscle and the hmmbuild command from hmmer is then used to build the HMM profile from this alignment. However, note that at the first iteration the usearch command is performed on the input sequences to ensure that thoses sequences share no more than 90% (default value) of identity. Sequence enrichment step # The previously built HMM profile is searched against the protein database given as input. All matching sequences with a E-values a less than 0.01 (default value) and an expected accuracy per residue of the alignment b above or equal to 0.6 (default value) are retrieved. Those sequences are then merged to the initial input sequences. To ensure that sequences are not redundant, usearch is applied with a threshold identity value of 0.90. Note a Both conditional and independent E-values from hmmer are evaluated b Please see the hmmer documentation for more details about the accuracy Convergence # Basically, the convergence is reached when the number of sequences at iteration i+1 (Nseq i+1 ) is equal to the number of sequences at iteration i (Nseq i ). However, Nseq i+1 can sometimes be below than Nseq i . Thus, to ensure that the pipeline does not run indefinitely, a counter is incremented each time the absolute difference between Nseq i+1 and Nseq i is less or equal to 1 (default value). The convergence is then also reached when the value of this counter is equal to 3 (default value). Outputs # An example output is as shown below: iterhmmbuild_2020-10-29_13-13-04/ \u251c\u2500\u2500 X.hmm \u251c\u2500\u2500 X_seed.clw \u251c\u2500\u2500 X_seed.fa \u251c\u2500\u2500 info.log \u251c\u2500\u2500 iter_1 \u2502 \u251c\u2500\u2500 X_enriched_nr.fasta \u2502 \u251c\u2500\u2500 X_nr.clw \u2502 \u251c\u2500\u2500 X_nr.domtblout \u2502 \u251c\u2500\u2500 X_nr.fa \u2502 \u2514\u2500\u2500 X_nr.hmm \u251c\u2500\u2500 ... \u2514\u2500\u2500 iter_6 \u251c\u2500\u2500 X_enriched_nr.clw \u251c\u2500\u2500 X_enriched_nr.domtblout \u251c\u2500\u2500 X_enriched_nr.fasta \u2514\u2500\u2500 X_enriched_nr.hmm The table below describes the content of the output directory: File name Description X.hmm Final HMM profile X_seed.fa Final sequences used to build X.hmm X_seed.clw Multiple alignment (clustal W format) of X_seed.fa info.log Log summary of the computation iter_1/X_nr.fa Non redundant sequences coming from usearch applied on the input X.fa (see IterHMMBuild procedure ) iter_1/X_nr.clw Multiple alignment of sequences in X_nr.fa iter_1/X_nr.hmm HMM profile built with X_nr.clw as input iter_1/X_nr.domtblout Output file of the hmmsearch command iter_1/X_enriched_nr.fasta Non redundant sequences coming from homologous sequences identified with hmmsearch and initial sequences in X.fa","title":"Overall procedure"},{"location":"ihb_introduction.html#iterhmmbuild-overall-procedure","text":"Figure 2: Pipeline overview of IterHMMBuild IterHMMBuild is an iterative search method based on the hmmer program, the aim of which is to provide users with a representative HMM protein profile of interest constructed by an iterative enrichment process starting from a small initial set of related protein sequences. The IterHMMBuild procedure starts building an HMM profile from either a set of related protein sequences or a single query sequence. This initial profile is then used to identify homologous sequences in any user-specified protein sequence database. If sequences are found, they are added to the initial query sequences and a new HMM profile model is built. This process is repeated until no new sequences are found (i.e. convergence is reached).","title":"IterHMMBuild overall procedure"},{"location":"ihb_introduction.html#inputs","text":"Two inputs are required for IterHMMBuild. The first input is either a fasta file with at least one protein sequence ( Figure 2 ) OR a directory location where multiple individual fasta files are stored ( Figure 1 ). In the first case, the output will contain an HMM profile representative of the sequences in the fasta file given as input; if a directory is given as input then the HMM profile in the output will be a concatenation of HMM profiles, each corresponding to the fasta files present in the directory. The second input is a fasta file of protein database used to enrich initial protein sequence(s) of interest.","title":"Inputs"},{"location":"ihb_introduction.html#hmm-building-step","text":"The HMM building is a two-step procedure: a multiple sequence alignment is performed on the input sequences using muscle and the hmmbuild command from hmmer is then used to build the HMM profile from this alignment. However, note that at the first iteration the usearch command is performed on the input sequences to ensure that thoses sequences share no more than 90% (default value) of identity.","title":"HMM building step"},{"location":"ihb_introduction.html#sequence-enrichment-step","text":"The previously built HMM profile is searched against the protein database given as input. All matching sequences with a E-values a less than 0.01 (default value) and an expected accuracy per residue of the alignment b above or equal to 0.6 (default value) are retrieved. Those sequences are then merged to the initial input sequences. To ensure that sequences are not redundant, usearch is applied with a threshold identity value of 0.90. Note a Both conditional and independent E-values from hmmer are evaluated b Please see the hmmer documentation for more details about the accuracy","title":"Sequence enrichment step"},{"location":"ihb_introduction.html#convergence","text":"Basically, the convergence is reached when the number of sequences at iteration i+1 (Nseq i+1 ) is equal to the number of sequences at iteration i (Nseq i ). However, Nseq i+1 can sometimes be below than Nseq i . Thus, to ensure that the pipeline does not run indefinitely, a counter is incremented each time the absolute difference between Nseq i+1 and Nseq i is less or equal to 1 (default value). The convergence is then also reached when the value of this counter is equal to 3 (default value).","title":"Convergence"},{"location":"ihb_introduction.html#outputs","text":"An example output is as shown below: iterhmmbuild_2020-10-29_13-13-04/ \u251c\u2500\u2500 X.hmm \u251c\u2500\u2500 X_seed.clw \u251c\u2500\u2500 X_seed.fa \u251c\u2500\u2500 info.log \u251c\u2500\u2500 iter_1 \u2502 \u251c\u2500\u2500 X_enriched_nr.fasta \u2502 \u251c\u2500\u2500 X_nr.clw \u2502 \u251c\u2500\u2500 X_nr.domtblout \u2502 \u251c\u2500\u2500 X_nr.fa \u2502 \u2514\u2500\u2500 X_nr.hmm \u251c\u2500\u2500 ... \u2514\u2500\u2500 iter_6 \u251c\u2500\u2500 X_enriched_nr.clw \u251c\u2500\u2500 X_enriched_nr.domtblout \u251c\u2500\u2500 X_enriched_nr.fasta \u2514\u2500\u2500 X_enriched_nr.hmm The table below describes the content of the output directory: File name Description X.hmm Final HMM profile X_seed.fa Final sequences used to build X.hmm X_seed.clw Multiple alignment (clustal W format) of X_seed.fa info.log Log summary of the computation iter_1/X_nr.fa Non redundant sequences coming from usearch applied on the input X.fa (see IterHMMBuild procedure ) iter_1/X_nr.clw Multiple alignment of sequences in X_nr.fa iter_1/X_nr.hmm HMM profile built with X_nr.clw as input iter_1/X_nr.domtblout Output file of the hmmsearch command iter_1/X_enriched_nr.fasta Non redundant sequences coming from homologous sequences identified with hmmsearch and initial sequences in X.fa","title":"Outputs"},{"location":"ihb_usage.html","text":"Usage guideline # Two inputs are required for IterHMMBuild, both in a fasta format: either a fasta file with at least one protein sequence OR a directory location where multiple individual fasta files are stored a fasta file of protein database used to enrich initial protein sequence(s) of interest To guide the user, input data examples can be found in cusProSe-x.x.x/iterhmmbuild/datas/ : datas/ \u251c\u2500\u2500 inputs \u2502 \u251c\u2500\u2500 A.fa \u2502 \u251c\u2500\u2500 KS.fa \u2502 \u2514\u2500\u2500 PP.fa \u2514\u2500\u2500 mgg_70-15_8.fasta All fasta files in the inputs/ directory contain sequences of three different protein domains. There is also the magnaporthe orizae proteome (mgg_70-15_8.fasta) that will be used as the protein database for the examples below. Running IterHMMBuild # If you want to run IterHMMBuild in order to build an HMM profile representing the A domain, type in the terminal: iterhmmbuild -fa inputs/A.fa -protdb mgg_70-15_8.fasta If you want to run IterHMMBuild in order to build an HMM profile database representing all domains in inputs/ type: iterhmmbuild -fa inputs/ -protdb mgg_70-15_8.fasta Output of IterHMMBuild # After running IterHMMBuild an output directory will be generated in the following generic format: iterhmmbuild_year-month-day_hour-min-sec/ Output content from a single fasta file used as input # The directory content generated from A.fa used as input will be as follow: iterhmmbuild_2020-10-29_13-13-04/ \u251c\u2500\u2500 A.hmm \u251c\u2500\u2500 A_seed.clw \u251c\u2500\u2500 A_seed.fa \u251c\u2500\u2500 info.log \u251c\u2500\u2500 iter_1/ \u251c\u2500\u2500 iter_2/ \u251c\u2500\u2500 ... \u2514\u2500\u2500 iter_6/ The three main files of interest are: A.hmm Final HMM profile A.seed.clw Final sequences used to build A.hmm A.seed.fa Multiple alignment (clustal W format) of A_seed.fa info.log is a log summary of the computation. The subdirectories iter_i/ contain files obtained at each iteration and are described in section Overall procedure . Output content from a directory with multiple fasta files used as input # The directory content generated from inputs/ will be a list of subdirectories such as the output described above. You will find at its root the file hmm_database.hmm , a concatenation of the HMM profiles of protein domains used as inputs. iterhmmbuild_2021-03-02_12-39-38 \u251c\u2500\u2500 hmm_database.hmm \u251c\u2500\u2500 info.log \u251c\u2500\u2500 A \u2502 \u251c\u2500\u2500 A.hmm \u2502 \u251c\u2500\u2500 A_seed.clw \u2502 \u2514\u2500\u2500 A_seed.fa \u251c\u2500\u2500 KS \u2502 \u251c\u2500\u2500 KS.hmm \u2502 \u251c\u2500\u2500 KS_seed.clw \u2502 \u2514\u2500\u2500 KS_seed.fa \u2514\u2500\u2500 PP \u251c\u2500\u2500 PP.hmm \u251c\u2500\u2500 PP_seed.clw \u2514\u2500\u2500 PP_seed.fa Parameters of IterHMMBuild # -fa [FA] Fasta file of sequence(s) used as first seed or directory containing such files -protdb [PROTDB] Sequences used to learn the hmm profile (fasta format) -name [NAME] Name for the HMM profile (fasta name by default). -out [OUT] Output directory -id ID Sequence identity threshold to remove redundancy in seed sequences (0.9) -cov COV Minimum percentage of coverage alignment between hmm hit and hmm profile (0.0) -cval CVAL hmmer conditional e-value cutoff (0.01) -ival IVAL hmmer independant e-value cutoff (0.01) -acc ACC hmmer mean probability of the alignment accuracy between each residues of the target and the corresponding hmm state (0.6)","title":"Usage guideline"},{"location":"ihb_usage.html#usage-guideline","text":"Two inputs are required for IterHMMBuild, both in a fasta format: either a fasta file with at least one protein sequence OR a directory location where multiple individual fasta files are stored a fasta file of protein database used to enrich initial protein sequence(s) of interest To guide the user, input data examples can be found in cusProSe-x.x.x/iterhmmbuild/datas/ : datas/ \u251c\u2500\u2500 inputs \u2502 \u251c\u2500\u2500 A.fa \u2502 \u251c\u2500\u2500 KS.fa \u2502 \u2514\u2500\u2500 PP.fa \u2514\u2500\u2500 mgg_70-15_8.fasta All fasta files in the inputs/ directory contain sequences of three different protein domains. There is also the magnaporthe orizae proteome (mgg_70-15_8.fasta) that will be used as the protein database for the examples below.","title":"Usage guideline"},{"location":"ihb_usage.html#running-iterhmmbuild","text":"If you want to run IterHMMBuild in order to build an HMM profile representing the A domain, type in the terminal: iterhmmbuild -fa inputs/A.fa -protdb mgg_70-15_8.fasta If you want to run IterHMMBuild in order to build an HMM profile database representing all domains in inputs/ type: iterhmmbuild -fa inputs/ -protdb mgg_70-15_8.fasta","title":"Running IterHMMBuild"},{"location":"ihb_usage.html#output-of-iterhmmbuild","text":"After running IterHMMBuild an output directory will be generated in the following generic format: iterhmmbuild_year-month-day_hour-min-sec/","title":"Output of IterHMMBuild"},{"location":"ihb_usage.html#output-content-from-a-single-fasta-file-used-as-input","text":"The directory content generated from A.fa used as input will be as follow: iterhmmbuild_2020-10-29_13-13-04/ \u251c\u2500\u2500 A.hmm \u251c\u2500\u2500 A_seed.clw \u251c\u2500\u2500 A_seed.fa \u251c\u2500\u2500 info.log \u251c\u2500\u2500 iter_1/ \u251c\u2500\u2500 iter_2/ \u251c\u2500\u2500 ... \u2514\u2500\u2500 iter_6/ The three main files of interest are: A.hmm Final HMM profile A.seed.clw Final sequences used to build A.hmm A.seed.fa Multiple alignment (clustal W format) of A_seed.fa info.log is a log summary of the computation. The subdirectories iter_i/ contain files obtained at each iteration and are described in section Overall procedure .","title":"Output content from a single fasta file used as input"},{"location":"ihb_usage.html#output-content-from-a-directory-with-multiple-fasta-files-used-as-input","text":"The directory content generated from inputs/ will be a list of subdirectories such as the output described above. You will find at its root the file hmm_database.hmm , a concatenation of the HMM profiles of protein domains used as inputs. iterhmmbuild_2021-03-02_12-39-38 \u251c\u2500\u2500 hmm_database.hmm \u251c\u2500\u2500 info.log \u251c\u2500\u2500 A \u2502 \u251c\u2500\u2500 A.hmm \u2502 \u251c\u2500\u2500 A_seed.clw \u2502 \u2514\u2500\u2500 A_seed.fa \u251c\u2500\u2500 KS \u2502 \u251c\u2500\u2500 KS.hmm \u2502 \u251c\u2500\u2500 KS_seed.clw \u2502 \u2514\u2500\u2500 KS_seed.fa \u2514\u2500\u2500 PP \u251c\u2500\u2500 PP.hmm \u251c\u2500\u2500 PP_seed.clw \u2514\u2500\u2500 PP_seed.fa","title":"Output content from a directory with multiple fasta files used as input"},{"location":"ihb_usage.html#parameters-of-iterhmmbuild","text":"-fa [FA] Fasta file of sequence(s) used as first seed or directory containing such files -protdb [PROTDB] Sequences used to learn the hmm profile (fasta format) -name [NAME] Name for the HMM profile (fasta name by default). -out [OUT] Output directory -id ID Sequence identity threshold to remove redundancy in seed sequences (0.9) -cov COV Minimum percentage of coverage alignment between hmm hit and hmm profile (0.0) -cval CVAL hmmer conditional e-value cutoff (0.01) -ival IVAL hmmer independant e-value cutoff (0.01) -acc ACC hmmer mean probability of the alignment accuracy between each residues of the target and the corresponding hmm state (0.6)","title":"Parameters of IterHMMBuild"},{"location":"installation.html","text":"Installation # Note CusProSe requires a python version >= 3.7 External dependencies # CusProSe relies on three external tools: hmmer, muscle and usearch. The first two can be easily installed from the following commands: hmmer (tested with version 3.3) sudo apt install hmmer muscle (tested with version 3.8.1551) sudo apt install muscle For usearch, you first need to download it here: usearch (tested with version v10.0.240) Next, you will have to rename it and make it accessible from anywhere in your system: # rename to usearch mv usearchXX.X.XXX_i86xxxx.gz usearch # make usearch executable chmod +x usearch # make usearch easily accessible mkdir ~/bin mv usearch ~/bin Finally, copy the following line in your .bashrc file (or .bash_profile for macos users) export PATH=$PATH:~/bin Create an isolated environment # Although not indispensable, this step is highly recommended (it will allow you to work on different projects avoiding potential conflicts between different versions of some python libraries). Install virtualenv # python3 -m pip install virtualenv Create a virtual python3 environment # virtualenv -p python3 my_env Activate the created environment # source my_env/bin/activate Once activated, any python library you'll install using pip will be installed solely in this isolated environment. Every time you'll need to work with libraries installed in this environment (i.e. work on your project), you'll have to activate it. Once you're done working on your project, simply type deactivate to exit the environment. Download and install the latest release of CusProSe # Click here for the latest release: Uncompress the archive # If you downloaded the .zip file: unzip cusProSe-x.x.x.zip If you downloaded the .tar.gz file: tar xzvf cusProSe-x.x.x.tar.gz Go to the cusProSe directory # cd cusProSe-x.x.x/ Install CusProSe on your virtual environment # Make sure your virtual environment is activated and type the following command: python setup.py install or pip install .","title":"Installation"},{"location":"installation.html#installation","text":"Note CusProSe requires a python version >= 3.7","title":"Installation"},{"location":"installation.html#external-dependencies","text":"CusProSe relies on three external tools: hmmer, muscle and usearch. The first two can be easily installed from the following commands: hmmer (tested with version 3.3) sudo apt install hmmer muscle (tested with version 3.8.1551) sudo apt install muscle For usearch, you first need to download it here: usearch (tested with version v10.0.240) Next, you will have to rename it and make it accessible from anywhere in your system: # rename to usearch mv usearchXX.X.XXX_i86xxxx.gz usearch # make usearch executable chmod +x usearch # make usearch easily accessible mkdir ~/bin mv usearch ~/bin Finally, copy the following line in your .bashrc file (or .bash_profile for macos users) export PATH=$PATH:~/bin","title":"External dependencies"},{"location":"installation.html#create-an-isolated-environment","text":"Although not indispensable, this step is highly recommended (it will allow you to work on different projects avoiding potential conflicts between different versions of some python libraries).","title":"Create an isolated environment"},{"location":"installation.html#install-virtualenv","text":"python3 -m pip install virtualenv","title":"Install virtualenv"},{"location":"installation.html#create-a-virtual-python3-environment","text":"virtualenv -p python3 my_env","title":"Create a virtual python3 environment"},{"location":"installation.html#activate-the-created-environment","text":"source my_env/bin/activate Once activated, any python library you'll install using pip will be installed solely in this isolated environment. Every time you'll need to work with libraries installed in this environment (i.e. work on your project), you'll have to activate it. Once you're done working on your project, simply type deactivate to exit the environment.","title":"Activate the created environment"},{"location":"installation.html#download-and-install-the-latest-release-of-cusprose","text":"Click here for the latest release:","title":"Download and install the latest release of CusProSe"},{"location":"installation.html#uncompress-the-archive","text":"If you downloaded the .zip file: unzip cusProSe-x.x.x.zip If you downloaded the .tar.gz file: tar xzvf cusProSe-x.x.x.tar.gz","title":"Uncompress the archive"},{"location":"installation.html#go-to-the-cusprose-directory","text":"cd cusProSe-x.x.x/","title":"Go to the cusProSe directory"},{"location":"installation.html#install-cusprose-on-your-virtual-environment","text":"Make sure your virtual environment is activated and type the following command: python setup.py install or pip install .","title":"Install CusProSe on your virtual environment"},{"location":"psd_description.html","text":"","title":"Psd description"},{"location":"psd_introduction.html","text":"ProSeCDA Overall procedure # Figure 2: Pipeline overview of ProSeCDA ProSeCDA is a tool that allows to search in a given protein database multiple proteins of interest defined by a user-specified set of domains. The first step in ProSeCDA is to annotate a protein database of interest with domains from a user-specified HMM profile database. In the next step the annotated proteins are filtered following a set of rules defined by the user. The rule consists to define one or a set of protein families based on the presence and/or absence of domains. All proteins matching thoses rules are then finally accesible in the output. Inputs # ProSeCDA requires three inputs: a protein database in a fasta format in which the user wants to search proteins of interest based on their domain architecture. an HMM domain profile database used to annotate the input protein database. Any HMM domain profile database can be used as long as it is compatible with hmmersearch. a YAML file containing the rules, that is a set of protein families defined by the presence and/or absence of specific domain(s). The format of the YAML file is described in Usage guideline . Annotation # Selection of matching domains # The annotation step is required to assign domains from the HMM profile domain database that match to sequences in the protein database. Since domains of interest are those used to defined protein families in the YAML file set of rules, those domains are first fetched from the user-given HMM domain profile database and a new temporary one is created to reduce the computation time. The annotation procedure uses hmmsearch to search for each of these HMM domain profile against the protein database of interest. All matching sequences with an E-values a less than 0.01 (default value) and an expected accuracy per residue of the alignment b above or equal to 0.6 (default value) are then retrieved. Note a Both conditional and independent E-values from hmmer are evaluated b Please see the hmmer documentation for more details about the accuracy Resolving overlapping domains # To resolve overlapping domains a , an approach similar to the heaviest weighted clique-finding method described in Orengo et al. is used. When multiple matching domains are found for a protein sequence and some of those domains overlap, all possible domain architectures defined by a set of non-overlapping domains are identified, with each domain being assigned a score corresponding to -log(E-value). An alternative score is also used in case the E-value associated with a match is equal to 0.0. In that case, the bit score from hmmer is assigned to each domain instead of the -log(E-value) which cannot be computed. The protein is then assigned the most-likely domain architecture which is defined as the combination of non-overlapping domains that gives the highest total score. Note a We consider that two domains are overlapping if at least 40% of the shortest domain sequence overlap with the other domain. Filtering # The filtering step searches in all precedently annotated proteins the domain architectures matching those in the set of rules defined by the user. A match with a user-defined family is valid for a protein if its most-likely domain architecture fits the mandatory domains and if no forbidden domains are present. Moreover, if an E-value threshold is specified in the rules for a given mandatory domain, this domain must match with an E-value at least below this threshold. Output # The output of ProSeCDA has the following architecture: prosecda_yyyy-mm-dd_hh-mm-ss/ \u251c\u2500\u2500 protein_database_filename.domtblout \u251c\u2500\u2500 info.log \u2514\u2500\u2500 results/ \u251c\u2500\u2500 family_A1/ \u2502 \u251c\u2500\u2500 all_matching_proteins.pdf \u2502 \u251c\u2500\u2500 protein_id_1.fa \u2502 \u251c\u2500\u2500 protein_id_1.pdf \u2502 \u251c\u2500\u2500 protein_id_1.xml \u2502 \u251c\u2500\u2500 protein_id_2.fa \u2502 \u251c\u2500\u2500 protein_id_2.pdf \u2502 \u2514\u2500\u2500 protein_id_2.xml \u251c\u2500\u2500 family_A2/ \u2502 \u251c\u2500\u2500 all_matching_proteins.pdf \u2502 \u251c\u2500\u2500 protein_id_8.fa \u2502 \u251c\u2500\u2500 protein_id_8.pdf \u2502 \u251c\u2500\u2500 protein_id_8.xml \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ... The table below describes the content of the output directory: File/Directory name Description protein_database_filename.domtblout hmmsearch output in domtblout format info.log Summary log of the computation family_A1/ Subdirectory containing detailed files for proteins matching the rule defining 'family A1' all_matching_proteins.pdf Figures of all proteins matching the family rule with their most-likely domain architecture protein_id_1.fa Fasta sequence of the protein protein_id_1.pdf Figure of the protein with all matching domains protein_id_1.xml XML file describing the protein","title":"Overall procedure"},{"location":"psd_introduction.html#prosecda-overall-procedure","text":"Figure 2: Pipeline overview of ProSeCDA ProSeCDA is a tool that allows to search in a given protein database multiple proteins of interest defined by a user-specified set of domains. The first step in ProSeCDA is to annotate a protein database of interest with domains from a user-specified HMM profile database. In the next step the annotated proteins are filtered following a set of rules defined by the user. The rule consists to define one or a set of protein families based on the presence and/or absence of domains. All proteins matching thoses rules are then finally accesible in the output.","title":"ProSeCDA Overall procedure"},{"location":"psd_introduction.html#inputs","text":"ProSeCDA requires three inputs: a protein database in a fasta format in which the user wants to search proteins of interest based on their domain architecture. an HMM domain profile database used to annotate the input protein database. Any HMM domain profile database can be used as long as it is compatible with hmmersearch. a YAML file containing the rules, that is a set of protein families defined by the presence and/or absence of specific domain(s). The format of the YAML file is described in Usage guideline .","title":"Inputs"},{"location":"psd_introduction.html#annotation","text":"","title":"Annotation"},{"location":"psd_introduction.html#selection-of-matching-domains","text":"The annotation step is required to assign domains from the HMM profile domain database that match to sequences in the protein database. Since domains of interest are those used to defined protein families in the YAML file set of rules, those domains are first fetched from the user-given HMM domain profile database and a new temporary one is created to reduce the computation time. The annotation procedure uses hmmsearch to search for each of these HMM domain profile against the protein database of interest. All matching sequences with an E-values a less than 0.01 (default value) and an expected accuracy per residue of the alignment b above or equal to 0.6 (default value) are then retrieved. Note a Both conditional and independent E-values from hmmer are evaluated b Please see the hmmer documentation for more details about the accuracy","title":"Selection of matching domains"},{"location":"psd_introduction.html#resolving-overlapping-domains","text":"To resolve overlapping domains a , an approach similar to the heaviest weighted clique-finding method described in Orengo et al. is used. When multiple matching domains are found for a protein sequence and some of those domains overlap, all possible domain architectures defined by a set of non-overlapping domains are identified, with each domain being assigned a score corresponding to -log(E-value). An alternative score is also used in case the E-value associated with a match is equal to 0.0. In that case, the bit score from hmmer is assigned to each domain instead of the -log(E-value) which cannot be computed. The protein is then assigned the most-likely domain architecture which is defined as the combination of non-overlapping domains that gives the highest total score. Note a We consider that two domains are overlapping if at least 40% of the shortest domain sequence overlap with the other domain.","title":"Resolving overlapping domains"},{"location":"psd_introduction.html#filtering","text":"The filtering step searches in all precedently annotated proteins the domain architectures matching those in the set of rules defined by the user. A match with a user-defined family is valid for a protein if its most-likely domain architecture fits the mandatory domains and if no forbidden domains are present. Moreover, if an E-value threshold is specified in the rules for a given mandatory domain, this domain must match with an E-value at least below this threshold.","title":"Filtering"},{"location":"psd_introduction.html#output","text":"The output of ProSeCDA has the following architecture: prosecda_yyyy-mm-dd_hh-mm-ss/ \u251c\u2500\u2500 protein_database_filename.domtblout \u251c\u2500\u2500 info.log \u2514\u2500\u2500 results/ \u251c\u2500\u2500 family_A1/ \u2502 \u251c\u2500\u2500 all_matching_proteins.pdf \u2502 \u251c\u2500\u2500 protein_id_1.fa \u2502 \u251c\u2500\u2500 protein_id_1.pdf \u2502 \u251c\u2500\u2500 protein_id_1.xml \u2502 \u251c\u2500\u2500 protein_id_2.fa \u2502 \u251c\u2500\u2500 protein_id_2.pdf \u2502 \u2514\u2500\u2500 protein_id_2.xml \u251c\u2500\u2500 family_A2/ \u2502 \u251c\u2500\u2500 all_matching_proteins.pdf \u2502 \u251c\u2500\u2500 protein_id_8.fa \u2502 \u251c\u2500\u2500 protein_id_8.pdf \u2502 \u251c\u2500\u2500 protein_id_8.xml \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ... The table below describes the content of the output directory: File/Directory name Description protein_database_filename.domtblout hmmsearch output in domtblout format info.log Summary log of the computation family_A1/ Subdirectory containing detailed files for proteins matching the rule defining 'family A1' all_matching_proteins.pdf Figures of all proteins matching the family rule with their most-likely domain architecture protein_id_1.fa Fasta sequence of the protein protein_id_1.pdf Figure of the protein with all matching domains protein_id_1.xml XML file describing the protein","title":"Output"},{"location":"psd_usage.html","text":"run_prosecda # This tool allows you to detect in a proteome proteins matching specific given domain architectures rules. Three input files are required: * a proteome file (fasta format) * an HMM profile database * a file describing the rule (yaml format) Creating rules # The first requirement to run prosecda is to have a file containing the rules that describe protein families based on user-defined specific domain architecture. To do so, rules must be written in a specific yaml format (that will be described/changed later). The simplest way is to use a simple GUI (interface) accessible by typing create_rules With Graphical user interface # As shown in the above image, a rule is defined by different features: * Name : category/family name the proteins that'll match the rule will be assigned to * Comment : optional feature; can be used to describe the rule * Mandatory list : list of domain names the protein must contain * Forbidden list : optional list of domain names the protein must not contain In order to add mandatory/forbidden domain name into its proper list: * type its name (in Mandatory or Forbidden ) * optionally add a threshold score value the domain must match the protein sequence (3.0 by default) * click on insert Once your rule is defined, click on Add rule to the list . Repeat the procedure to create and add rule to the list. Once all your desired rules are defined, save them in a yaml format by clicking on Save rules . This yaml file will look like below: PKS: COMMENT: Polyketide Synthase CONDITION: mandatory: - KS - AT - PP-binding, 15 forbidden: - C PKS-like: COMMENT: Polyketide Synthase like CONDITION: mandatory: - KS - AT forbidden: PKS_type3.0: COMMENT: Polyketide Syntase type III CONDITION: mandatory: - CHS_like forbidden: Running prosecda # Input examples are available in cusProSe-x.x.x/prosecda/datas/ The command below will search in the f. fujikuroi proteomes all proteins matching the rules defined in rules.yaml from the HMM profile database databaseKGall_terpenes_selec.hmm: run_prosecda -proteome fusarium_fujikuroi_IMI58289_V2_protein.fasta -hmmdb databaseKGall_terpenes_selec.hmm -rules rules.yaml An output directory will be generated in a generic format: prosecda_year-month-day_hour-min-sec/ This directory content will be like the one below: prosecda_2020-10-29_15-55-24/ \u251c\u2500\u2500 fusarium_fujikuroi_IMI58289_V2_protein.domtblout \u251c\u2500\u2500 info.log \u2514\u2500\u2500 matches with: * fusarium_fujikuroi_IMI58289_V2_protein.domtblout: output file of hmmsearch * matches: directory containing different output files for rules matching proteins The content of matches directory is as follow: matches \u251c\u2500\u2500 DMATS \u2502 \u251c\u2500\u2500 XP_023429775.1.fa \u2502 \u251c\u2500\u2500 XP_023429775.1.xml \u2502 \u251c\u2500\u2500 XP_023436063.1.fa \u2502 \u2514\u2500\u2500 XP_023436063.1.xml \u251c\u2500\u2500 DMATS.pdf \u251c\u2500\u2500 Ent_kaurene_synthase \u2502 \u251c\u2500\u2500 XP_023431478.1.fa \u2502 \u2514\u2500\u2500 XP_023431478.1.xml \u251c\u2500\u2500 Ent_kaurene_synthase.pdf \u251c\u2500\u2500 NRPS-PKS \u2502 \u251c\u2500\u2500 XP_023427367.1.fa \u2502 \u251c\u2500\u2500 XP_023427367.1.xml \u2502 \u251c\u2500\u2500 XP_023429959.1.fa \u2502 \u251c\u2500\u2500 XP_023429959.1.xml \u2502 \u251c\u2500\u2500 XP_023434892.1.fa \u2502 \u251c\u2500\u2500 XP_023434892.1.xml \u2502 \u251c\u2500\u2500 XP_023435338.1.fa \u2502 \u2514\u2500\u2500 XP_023435338.1.xml \u2514\u2500\u2500 NRPS-PKS.pdf with: * DMATS, Ent_kaurene_synthase and NRPS-PKS: subdirectories containing output files for proteins matching the given rule * protein.fa: protein sequence in fasta file format * protein.xml: informations about the protein and its domain(s) * pdf files: graphical representation of the most likely domain architecture of the protein Example of the output pdf file for XP_023431478.1 in NRPS-PKS: <protein> <id>XP_023431478.1</id> <sequence_length>952</sequence_length> <class_name>Ent_kaurene_synthase</class_name> <domain_architecture> <domain name=\"ent_kaurene\"> <cval>0.0</cval> <ival>0.0</ival> <score>1074.3</score> <start>10</start> <end>952</end> <domain_length>943</domain_length> </domain> </domain_architecture> </protein> Example of the output pdf file for XP_023431478.1 in NRPS-PKS: Output More later... #","title":"Usage guideline"},{"location":"psd_usage.html#run_prosecda","text":"This tool allows you to detect in a proteome proteins matching specific given domain architectures rules. Three input files are required: * a proteome file (fasta format) * an HMM profile database * a file describing the rule (yaml format)","title":"run_prosecda"},{"location":"psd_usage.html#creating-rules","text":"The first requirement to run prosecda is to have a file containing the rules that describe protein families based on user-defined specific domain architecture. To do so, rules must be written in a specific yaml format (that will be described/changed later). The simplest way is to use a simple GUI (interface) accessible by typing create_rules","title":"Creating rules"},{"location":"psd_usage.html#with-graphical-user-interface","text":"As shown in the above image, a rule is defined by different features: * Name : category/family name the proteins that'll match the rule will be assigned to * Comment : optional feature; can be used to describe the rule * Mandatory list : list of domain names the protein must contain * Forbidden list : optional list of domain names the protein must not contain In order to add mandatory/forbidden domain name into its proper list: * type its name (in Mandatory or Forbidden ) * optionally add a threshold score value the domain must match the protein sequence (3.0 by default) * click on insert Once your rule is defined, click on Add rule to the list . Repeat the procedure to create and add rule to the list. Once all your desired rules are defined, save them in a yaml format by clicking on Save rules . This yaml file will look like below: PKS: COMMENT: Polyketide Synthase CONDITION: mandatory: - KS - AT - PP-binding, 15 forbidden: - C PKS-like: COMMENT: Polyketide Synthase like CONDITION: mandatory: - KS - AT forbidden: PKS_type3.0: COMMENT: Polyketide Syntase type III CONDITION: mandatory: - CHS_like forbidden:","title":"With Graphical user interface"},{"location":"psd_usage.html#running-prosecda","text":"Input examples are available in cusProSe-x.x.x/prosecda/datas/ The command below will search in the f. fujikuroi proteomes all proteins matching the rules defined in rules.yaml from the HMM profile database databaseKGall_terpenes_selec.hmm: run_prosecda -proteome fusarium_fujikuroi_IMI58289_V2_protein.fasta -hmmdb databaseKGall_terpenes_selec.hmm -rules rules.yaml An output directory will be generated in a generic format: prosecda_year-month-day_hour-min-sec/ This directory content will be like the one below: prosecda_2020-10-29_15-55-24/ \u251c\u2500\u2500 fusarium_fujikuroi_IMI58289_V2_protein.domtblout \u251c\u2500\u2500 info.log \u2514\u2500\u2500 matches with: * fusarium_fujikuroi_IMI58289_V2_protein.domtblout: output file of hmmsearch * matches: directory containing different output files for rules matching proteins The content of matches directory is as follow: matches \u251c\u2500\u2500 DMATS \u2502 \u251c\u2500\u2500 XP_023429775.1.fa \u2502 \u251c\u2500\u2500 XP_023429775.1.xml \u2502 \u251c\u2500\u2500 XP_023436063.1.fa \u2502 \u2514\u2500\u2500 XP_023436063.1.xml \u251c\u2500\u2500 DMATS.pdf \u251c\u2500\u2500 Ent_kaurene_synthase \u2502 \u251c\u2500\u2500 XP_023431478.1.fa \u2502 \u2514\u2500\u2500 XP_023431478.1.xml \u251c\u2500\u2500 Ent_kaurene_synthase.pdf \u251c\u2500\u2500 NRPS-PKS \u2502 \u251c\u2500\u2500 XP_023427367.1.fa \u2502 \u251c\u2500\u2500 XP_023427367.1.xml \u2502 \u251c\u2500\u2500 XP_023429959.1.fa \u2502 \u251c\u2500\u2500 XP_023429959.1.xml \u2502 \u251c\u2500\u2500 XP_023434892.1.fa \u2502 \u251c\u2500\u2500 XP_023434892.1.xml \u2502 \u251c\u2500\u2500 XP_023435338.1.fa \u2502 \u2514\u2500\u2500 XP_023435338.1.xml \u2514\u2500\u2500 NRPS-PKS.pdf with: * DMATS, Ent_kaurene_synthase and NRPS-PKS: subdirectories containing output files for proteins matching the given rule * protein.fa: protein sequence in fasta file format * protein.xml: informations about the protein and its domain(s) * pdf files: graphical representation of the most likely domain architecture of the protein Example of the output pdf file for XP_023431478.1 in NRPS-PKS: <protein> <id>XP_023431478.1</id> <sequence_length>952</sequence_length> <class_name>Ent_kaurene_synthase</class_name> <domain_architecture> <domain name=\"ent_kaurene\"> <cval>0.0</cval> <ival>0.0</ival> <score>1074.3</score> <start>10</start> <end>952</end> <domain_length>943</domain_length> </domain> </domain_architecture> </protein> Example of the output pdf file for XP_023431478.1 in NRPS-PKS: Output","title":"Running prosecda"},{"location":"psd_usage.html#more-later","text":"","title":"More later..."}]}