{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to CustomProteinSearch # Figure 1: Overview of the CusProSe package functionalities CustomProteinSearch is a python package containing two independent but complementary programs whose overall objective is to help users to search for specific proteins of interest based on their domain composition: IterHMMBuild and ProSeCDA . IterHMMBuild is an iterative search method based on the hmmer program, the aim of which is to provide users with a representative HMM protein profile of interest constructed by an iterative enrichment process starting from a small initial set of related protein sequences. ProSeCDA is a tool that allows to search in a given protein database multiple proteins of interest defined by a user-specified set of domains.","title":"Home"},{"location":"index.html#welcome-to-customproteinsearch","text":"Figure 1: Overview of the CusProSe package functionalities CustomProteinSearch is a python package containing two independent but complementary programs whose overall objective is to help users to search for specific proteins of interest based on their domain composition: IterHMMBuild and ProSeCDA . IterHMMBuild is an iterative search method based on the hmmer program, the aim of which is to provide users with a representative HMM protein profile of interest constructed by an iterative enrichment process starting from a small initial set of related protein sequences. ProSeCDA is a tool that allows to search in a given protein database multiple proteins of interest defined by a user-specified set of domains.","title":"Welcome to CustomProteinSearch"},{"location":"ihb_description.html","text":"","title":"Ihb description"},{"location":"ihb_introduction.html","text":"Overall procedure # Figure 2: Pipeline overview of IterHMMBuild IterHMMBuild is an iterative search method based on the hmmer program, the aim of which is to provide users with a representative HMM protein profile of interest constructed by an iterative enrichment process starting from a small initial set of related protein sequences. The IterHMMBuild procedure starts building an HMM profile from either a set of related protein sequences or a single query sequence. This initial profile is then used to identify homologous sequences in any user-specified protein sequence database. If sequences are found, they are added to the initial query sequences and a new HMM profile model is built. This process is repeated until no new sequences are found (i.e. convergence is reached). IterHMMBuild procedure step by step # Inputs # Two inputs are required for IterHMMBuild. The first input is either a fasta file with at least one protein sequence (Figure 2) OR a directory location where multiple individual fasta files are stored (Figure 1). In the first case, the output will contain an HMM profile representative of the sequences in the fasta file given as input; if a directory is given as input then the HMM profile in the output will be a concatenation of HMM profiles, each corresponding to the fasta files present in the directory. The second input a fasta file of protein database used to enrich initial protein sequence(s) of interest. HMM building step # The HMM building is a two-step procedure: a multiple sequence alignment is performed on the input sequences using muscle and the hmmbuild command from hmmer is then used to build the HMM profile from this alignment. However, at the first iteration the usearch command is performed on the input sequences to ensure that thoses sequences share no more than 90% (default value) of identity. Sequence enrichment step # The previously built HMM profile is searched against the protein database given as input. All matching sequences with a E-values a less than 0.01 (default value) and an expected accuracy per residue of the alignment b above or equal to 0.6 (default value) are retrieved. Those sequences are then merged to the initial input sequences. To ensure that sequences are not redundant, usearch is applied with a threshold identity value of 0.90. Note a Both conditional and independent E-values from hmmer are evaluated b Please see the hmmer documentation for more details about the accuracy Convergence # Basically, the convergence is reached when the number of sequences at iteration i+1 (Nseq i+1 ) is equal to the number of sequences at iteration i (Nseq i ). However, Nseq i+1 can sometimes be below than Nseq i . Thus, to ensure that the pipeline does not run indefinitely, a counter is incremented each time the absolute difference between Nseq i+1 and Nseq i is less or equal to 1 (default value). The convergence is then also reached when the value of this counter is equal to 3 (default value). Outputs # Multiple files are generated (see Usage ) but the most important are: the HMM profile the protein fasta file with sequences used to build the HMM profile (seeds) the multiple alignment file of the seeds","title":"Overall procedure"},{"location":"ihb_introduction.html#overall-procedure","text":"Figure 2: Pipeline overview of IterHMMBuild IterHMMBuild is an iterative search method based on the hmmer program, the aim of which is to provide users with a representative HMM protein profile of interest constructed by an iterative enrichment process starting from a small initial set of related protein sequences. The IterHMMBuild procedure starts building an HMM profile from either a set of related protein sequences or a single query sequence. This initial profile is then used to identify homologous sequences in any user-specified protein sequence database. If sequences are found, they are added to the initial query sequences and a new HMM profile model is built. This process is repeated until no new sequences are found (i.e. convergence is reached).","title":"Overall procedure"},{"location":"ihb_introduction.html#iterhmmbuild-procedure-step-by-step","text":"","title":"IterHMMBuild procedure step by step"},{"location":"ihb_introduction.html#inputs","text":"Two inputs are required for IterHMMBuild. The first input is either a fasta file with at least one protein sequence (Figure 2) OR a directory location where multiple individual fasta files are stored (Figure 1). In the first case, the output will contain an HMM profile representative of the sequences in the fasta file given as input; if a directory is given as input then the HMM profile in the output will be a concatenation of HMM profiles, each corresponding to the fasta files present in the directory. The second input a fasta file of protein database used to enrich initial protein sequence(s) of interest.","title":"Inputs"},{"location":"ihb_introduction.html#hmm-building-step","text":"The HMM building is a two-step procedure: a multiple sequence alignment is performed on the input sequences using muscle and the hmmbuild command from hmmer is then used to build the HMM profile from this alignment. However, at the first iteration the usearch command is performed on the input sequences to ensure that thoses sequences share no more than 90% (default value) of identity.","title":"HMM building step"},{"location":"ihb_introduction.html#sequence-enrichment-step","text":"The previously built HMM profile is searched against the protein database given as input. All matching sequences with a E-values a less than 0.01 (default value) and an expected accuracy per residue of the alignment b above or equal to 0.6 (default value) are retrieved. Those sequences are then merged to the initial input sequences. To ensure that sequences are not redundant, usearch is applied with a threshold identity value of 0.90. Note a Both conditional and independent E-values from hmmer are evaluated b Please see the hmmer documentation for more details about the accuracy","title":"Sequence enrichment step"},{"location":"ihb_introduction.html#convergence","text":"Basically, the convergence is reached when the number of sequences at iteration i+1 (Nseq i+1 ) is equal to the number of sequences at iteration i (Nseq i ). However, Nseq i+1 can sometimes be below than Nseq i . Thus, to ensure that the pipeline does not run indefinitely, a counter is incremented each time the absolute difference between Nseq i+1 and Nseq i is less or equal to 1 (default value). The convergence is then also reached when the value of this counter is equal to 3 (default value).","title":"Convergence"},{"location":"ihb_introduction.html#outputs","text":"Multiple files are generated (see Usage ) but the most important are: the HMM profile the protein fasta file with sequences used to build the HMM profile (seeds) the multiple alignment file of the seeds","title":"Outputs"},{"location":"ihb_usage.html","text":"Usage guideline # Two inputs are required for IterHMMBuild, both in a fasta format: either a fasta file with at least one protein sequence OR a directory location where multiple individual fasta files are stored a fasta file of protein database used to enrich initial protein sequence(s) of interest To guide the user, input data examples can be found in cusProSe-x.x.x/iterhmmbuild/datas/ : datas/ \u251c\u2500\u2500 inputs \u2502 \u251c\u2500\u2500 A.fa \u2502 \u251c\u2500\u2500 KS.fa \u2502 \u2514\u2500\u2500 PP.fa \u2514\u2500\u2500 mgg_70-15_8.fasta All fasta files in the inputs/ directory contain sequences of a three different protein domains. There is also the magnaporthe orizae proteome (mgg_70-15_8.fasta) that will be used as the protein database for the examples below. Running IterHMMBuild # If you want to run IterHMMBuild in order to build an HMM profile representing the A domain, type in the terminal: iterhmmbuild -fa inputs/A.fa -protdb mgg_70-15_8.fasta If you want to run IterHMMBuild in order to build an HMM profile database representing all domains in inputs/ type: iterhmmbuild -fa inputs/ -protdb mgg_70-15_8.fasta Output of IterHMMBuild # After running IterHMMBuild an output directory will be generated in the following generic format: iterhmmbuild_year-month-day_hour-min-sec/ This directory content generated from A.fa used as input will be as follow: iterhmmbuild_2020-10-29_13-13-04/ \u251c\u2500\u2500 A.hmm \u251c\u2500\u2500 A_seed.clw \u251c\u2500\u2500 A_seed.fa \u251c\u2500\u2500 info.log \u251c\u2500\u2500 iter_1 \u2502 \u251c\u2500\u2500 A_enriched_nr.fasta \u2502 \u251c\u2500\u2500 A_nr.clw \u2502 \u251c\u2500\u2500 A_nr.domtblout \u2502 \u251c\u2500\u2500 A_nr.fa \u2502 \u2514\u2500\u2500 A_nr.hmm \u251c\u2500\u2500 ... \u2514\u2500\u2500 iter_6 \u251c\u2500\u2500 A_enriched_nr.clw \u251c\u2500\u2500 A_enriched_nr.domtblout \u251c\u2500\u2500 A_enriched_nr.fasta \u2514\u2500\u2500 A_enriched_nr.hmm The table below describes the content of the output directory: File name Description A.hmm Final HMM profile A_seed.fa Final sequences used to build A.hmm A_seed.clw Multiple alignment (clustal W format) of A_seed.fa iter_1/A_nr.fa Non redundant sequences coming from usearch applied on the input A.fa (see IterHMMBuild procedure ) iter_1/A_nr.clw Multiple alignment of sequences in A_nr.fa iter_1/A_nr.hmm HMM profile built with A_nr.clw as input iter_1/A_nr.domtblout Output file of the hmmsearch command iter_1/A_enriched_nr.fasta Non redundant sequences coming from homologous sequences identified with hmmsearch and initial sequences in A.fa","title":"Usage guideline"},{"location":"ihb_usage.html#usage-guideline","text":"Two inputs are required for IterHMMBuild, both in a fasta format: either a fasta file with at least one protein sequence OR a directory location where multiple individual fasta files are stored a fasta file of protein database used to enrich initial protein sequence(s) of interest To guide the user, input data examples can be found in cusProSe-x.x.x/iterhmmbuild/datas/ : datas/ \u251c\u2500\u2500 inputs \u2502 \u251c\u2500\u2500 A.fa \u2502 \u251c\u2500\u2500 KS.fa \u2502 \u2514\u2500\u2500 PP.fa \u2514\u2500\u2500 mgg_70-15_8.fasta All fasta files in the inputs/ directory contain sequences of a three different protein domains. There is also the magnaporthe orizae proteome (mgg_70-15_8.fasta) that will be used as the protein database for the examples below.","title":"Usage guideline"},{"location":"ihb_usage.html#running-iterhmmbuild","text":"If you want to run IterHMMBuild in order to build an HMM profile representing the A domain, type in the terminal: iterhmmbuild -fa inputs/A.fa -protdb mgg_70-15_8.fasta If you want to run IterHMMBuild in order to build an HMM profile database representing all domains in inputs/ type: iterhmmbuild -fa inputs/ -protdb mgg_70-15_8.fasta","title":"Running IterHMMBuild"},{"location":"ihb_usage.html#output-of-iterhmmbuild","text":"After running IterHMMBuild an output directory will be generated in the following generic format: iterhmmbuild_year-month-day_hour-min-sec/ This directory content generated from A.fa used as input will be as follow: iterhmmbuild_2020-10-29_13-13-04/ \u251c\u2500\u2500 A.hmm \u251c\u2500\u2500 A_seed.clw \u251c\u2500\u2500 A_seed.fa \u251c\u2500\u2500 info.log \u251c\u2500\u2500 iter_1 \u2502 \u251c\u2500\u2500 A_enriched_nr.fasta \u2502 \u251c\u2500\u2500 A_nr.clw \u2502 \u251c\u2500\u2500 A_nr.domtblout \u2502 \u251c\u2500\u2500 A_nr.fa \u2502 \u2514\u2500\u2500 A_nr.hmm \u251c\u2500\u2500 ... \u2514\u2500\u2500 iter_6 \u251c\u2500\u2500 A_enriched_nr.clw \u251c\u2500\u2500 A_enriched_nr.domtblout \u251c\u2500\u2500 A_enriched_nr.fasta \u2514\u2500\u2500 A_enriched_nr.hmm The table below describes the content of the output directory: File name Description A.hmm Final HMM profile A_seed.fa Final sequences used to build A.hmm A_seed.clw Multiple alignment (clustal W format) of A_seed.fa iter_1/A_nr.fa Non redundant sequences coming from usearch applied on the input A.fa (see IterHMMBuild procedure ) iter_1/A_nr.clw Multiple alignment of sequences in A_nr.fa iter_1/A_nr.hmm HMM profile built with A_nr.clw as input iter_1/A_nr.domtblout Output file of the hmmsearch command iter_1/A_enriched_nr.fasta Non redundant sequences coming from homologous sequences identified with hmmsearch and initial sequences in A.fa","title":"Output of IterHMMBuild"},{"location":"installation.html","text":"Installation # Note CusProSe requires a python version >= 3.7 External dependencies # CusProSe relies on three external tools: hmmer, muscle and usearch. The first two can be easily installed from the following commands: hmmer (tested with version 3.3) sudo apt install hmmer muscle (tested with version 3.8.1551) sudo apt install muscle For usearch, you first need to download it here: usearch (tested with version v10.0.240) Next, you will have to rename it and make it accessible from anywhere in your system: # rename to usearch mv usearchXX.X.XXX_i86xxxx.gz usearch # make usearch executable chmod +x usearch # make usearch easily accessible mkdir ~/bin mv usearch ~/bin Finally, copy the following line in your .bashrc file (or .bash_profile for macos users) export PATH=$PATH:~/bin Create an isolated environment # Although not indispensable, this step is highly recommended (it will allow you to work on different projects avoiding potential conflicts between different versions of some python libraries). Install virtualenv # python3 -m pip install virtualenv Create a virtual python3 environment # virtualenv -p python3 my_env Activate the created environment # source my_env/bin/activate Once activated, any python library you'll install using pip will be installed solely in this isolated environment. Every time you'll need to work with libraries installed in this environment (i.e. work on your project), you'll have to activate it. Once you're done working on your project, simply type deactivate to exit the environment. Download and install the latest release of CusProSe # Click here for the latest release: Uncompress the archive # If you downloaded the .zip file: unzip cusProSe-x.x.x.zip If you downloaded the .tar.gz file: tar xzvf cusProSe-x.x.x.tar.gz Go to the cusProSe directory # cd cusProSe-x.x.x/ Install CusProSe on your virtual environment # Make sure your virtual environment is activated and type the following command: python setup.py install or pip install .","title":"Installation"},{"location":"installation.html#installation","text":"Note CusProSe requires a python version >= 3.7","title":"Installation"},{"location":"installation.html#external-dependencies","text":"CusProSe relies on three external tools: hmmer, muscle and usearch. The first two can be easily installed from the following commands: hmmer (tested with version 3.3) sudo apt install hmmer muscle (tested with version 3.8.1551) sudo apt install muscle For usearch, you first need to download it here: usearch (tested with version v10.0.240) Next, you will have to rename it and make it accessible from anywhere in your system: # rename to usearch mv usearchXX.X.XXX_i86xxxx.gz usearch # make usearch executable chmod +x usearch # make usearch easily accessible mkdir ~/bin mv usearch ~/bin Finally, copy the following line in your .bashrc file (or .bash_profile for macos users) export PATH=$PATH:~/bin","title":"External dependencies"},{"location":"installation.html#create-an-isolated-environment","text":"Although not indispensable, this step is highly recommended (it will allow you to work on different projects avoiding potential conflicts between different versions of some python libraries).","title":"Create an isolated environment"},{"location":"installation.html#install-virtualenv","text":"python3 -m pip install virtualenv","title":"Install virtualenv"},{"location":"installation.html#create-a-virtual-python3-environment","text":"virtualenv -p python3 my_env","title":"Create a virtual python3 environment"},{"location":"installation.html#activate-the-created-environment","text":"source my_env/bin/activate Once activated, any python library you'll install using pip will be installed solely in this isolated environment. Every time you'll need to work with libraries installed in this environment (i.e. work on your project), you'll have to activate it. Once you're done working on your project, simply type deactivate to exit the environment.","title":"Activate the created environment"},{"location":"installation.html#download-and-install-the-latest-release-of-cusprose","text":"Click here for the latest release:","title":"Download and install the latest release of CusProSe"},{"location":"installation.html#uncompress-the-archive","text":"If you downloaded the .zip file: unzip cusProSe-x.x.x.zip If you downloaded the .tar.gz file: tar xzvf cusProSe-x.x.x.tar.gz","title":"Uncompress the archive"},{"location":"installation.html#go-to-the-cusprose-directory","text":"cd cusProSe-x.x.x/","title":"Go to the cusProSe directory"},{"location":"installation.html#install-cusprose-on-your-virtual-environment","text":"Make sure your virtual environment is activated and type the following command: python setup.py install or pip install .","title":"Install CusProSe on your virtual environment"},{"location":"psd_description.html","text":"","title":"Psd description"},{"location":"psd_introduction.html","text":"","title":"Overall procedure"},{"location":"psd_usage.html","text":"","title":"Usage guideline"}]}